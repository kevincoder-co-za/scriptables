// We have 2 types of logs:
//
// 1) Operation logs - these are the logs generated by build scripts, and will record stdout and stderr from the remote server.
// 2) ScriptableTaskLog - this log keeps track of each step applied during a build process. If something goes wrong - this log used to track which steps
// need to be re-run.
package models

import (
	"time"

	"gorm.io/gorm"
	"plexcorp.tech/scriptable/utils"
)

type OperationLog struct {
	gorm.Model
	ID         int64     `gorm:"column:id"`
	EntityID   int64     `gorm:"column:entity_id"`
	Entity     string    `gorm:"column:entity;type:varchar(100)"`
	Log        string    `gorm:"column:log"`
	LogLevel   string    `gorm:"column:log_level;type:varchar(100)"`
	LogSummary string    `gorm:"column:log_summary;type:varchar(255)"`
	CreatedAt  time.Time `gorm:"column:created_at"`
	UpdatedAt  time.Time `gorm:"column:updated_at"`
	TeamID     int64
}

type ScriptableTaskLog struct {
	gorm.Model
	EntityID   int64     `gorm:"column:entity_id"`
	Entity     string    `gorm:"column:entity"`
	Task       string    `gorm:"column:task"`
	TaskStatus string    `gorm:"column:task_status"`
	CreatedAt  time.Time `gorm:"column:created_at"`
	UpdatedAt  time.Time `gorm:"column:updated_at"`
	TeamID     int64
}

func Log(entityId int64, entity string, log string, summary string, LogLevel string, teamId int64) {

	opLog := OperationLog{

		Entity:     entity,
		EntityID:   entityId,
		Log:        utils.Encrypt(log),
		LogLevel:   LogLevel,
		LogSummary: summary,
		CreatedAt:  time.Now(),
		UpdatedAt:  time.Now(),
		TeamID:     teamId,
	}
	GetDB().Create(&opLog)
}

func LogError(entityId int64, entity string, log string, summary string, teamId int64) {
	Log(entityId, entity, log, summary, "Error", teamId)
}

func LogInfo(entityId int64, entity string, log string, summary string, teamId int64) {
	Log(entityId, entity, log, summary, "Info", teamId)
}

func GetOperationLogs(page int, perPage int, entity_type string, id int64, logLevel string, teamId int64) []OperationLog {
	offset := (page - 1) * perPage
	var logs []OperationLog

	if logLevel != "" {
		GetDB().Where("entity=? AND entity_id=? AND log_level=? and team_id=?",
			entity_type, id, logLevel, teamId,
		).Limit(perPage).Offset(offset).Order("created_at desc").Find(&logs)
	} else {
		GetDB().Where("entity=? AND entity_id=? and team_id=?",
			entity_type, id, teamId,
		).Limit(perPage).Offset(offset).Order("created_at desc").Find(&logs)
	}

	return logs
}
